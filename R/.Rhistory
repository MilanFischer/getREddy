###########################################################################
#                                                                         #
#      --------------------------------------------------------------     #
#       getREddy - initial exploring of the raw eddy covariance data      #
#      --------------------------------------------------------------     #
#                                                                         #
#       Author: Milan Fischer                                             #
#       email: fischer.milan@gmail.com                                    #
#                                                                         #
###########################################################################
rm(list=ls())
library(stringr)
library(zoo)
#Functions to be used
source('2D_rotation.r')
source('Data_load_and_preprocessing.r')
source('Despike.r')
Load<-function(file,variable)
{
# Load input data
Unzipped_file<-unzip(file)[1]
L=integer(); n=1
while(length(L)<1)
{
L=which(grepl('DATAH',readLines(Unzipped_file,n)))
n=n+1
}
Data<-read.table(unzip(file)[1],skip=L)
Info<-readLines(Unzipped_file,n=L-1)
Header<-readLines(Unzipped_file,n=L)[L]
file.remove(unzip(file))
Names<-unlist(strsplit(Header,"\t"))
names(Data)<-Names
if(length(grep('LI-7500A',Info))==1){Analyser='LI-7500A'}else
if(length(grep('LI-7500',Info))==1){Analyser='LI-7500'}else
if(length(grep('LI-7200',Info))==1){Analyser='LI-7200'}
# Timestamp
timestamp=as.character(Timestamp(Data$"Date",Data$"Time"))
# Air humidity (mmol/mol)
if(Analyser=='LI-7500'|Analyser=='LI-7500A')
{
Q<-Data$"H2O (mmol/mol)"
}else{
Q<-Data$"H2O dry(mmol/mol)"
}
# CO2 concentration (µmol/mol)
if(Analyser=='LI-7500'|Analyser=='LI-7500A')
{
C<-Data$"CO2 (umol/mol)"
}else{
C<-Data$"CO2 dry(umol/mol)"
}
# Sonic temperature (°C)
ts<-Data$"Aux 4 - Ts (C)" 
#Vertical velcoity (m/s)
u<-Data$"Aux 1 - U (m/s)" 
v<-Data$"Aux 2 - V (m/s)"
w<-Data$"Aux 3 - W (m/s)"
###############################
### Despike the time series ###
###############################
u_de=Despike(Data,u,gapfill=TRUE)$Y
v_de=Despike(Data,v,gapfill=TRUE)$Y
w_de=Despike(Data,w,gapfill=TRUE)$Y
if(variable=='ts'){
out_despike=Despike(Data,ts,gapfill=TRUE)
Tde=out_despike$Y
No_of_spikes_ts=out_despike$No_of_spikes
}else if(variable=='Q'){
out_despike=Despike(Data,Q,gapfill=TRUE)
Qde=out_despike$Y
No_of_spikes_Q=out_despike$No_of_spikes
}else if(variable=='C'){
out_despike=Despike(Data,C,gapfill=TRUE)
Cde=out_despike$Y
No_of_spikes_C=out_despike$No_of_spikes
}
#############################
### Rotate the anemometer ###
#############################
Anemometer_rotation=rotation2D(u_de,v_de,w_de)
u_de_rot=Anemometer_rotation$uRot
v_de_rot=Anemometer_rotation$vRot
w_de_rot=Anemometer_rotation$wRot
# Define the variable to be analyzed
if(variable=='u'){
Vde=u_de_rot
}else if(variable=='w'){
Vde=w_de_rot
}else if(variable=='ts'){
V=ts; Vde=Tde
}else if(variable=='Q'){
V=Q; Vde=Qde
}else if(variable=='C'){
V=C; Vde=Cde
}
########################
### Plot time-series ###
########################
if(variable %in% c('u','w'))
{
png(paste(Main_WD,'/Outputs/',variable,'/',format(as.POSIXct(timestamp),'%Y-%m-%d_%H%M'),'_',variable,'_a) time-series.png',sep=''),type='cairo')
plot(Vde,type='l',ylab=variable,xlab='n')
dev.off()
}else{
png(paste(Main_WD,'/Outputs/',variable,'/',format(as.POSIXct(timestamp),'%Y-%m-%d_%H%M'),'_',variable,'_a) time-series.png',sep=''),type='cairo')
plot(V,type='l',col='red',ylab=variable,xlab='n')
lines(Vde)
dev.off()
}
#####################
### Trend removal ###
#####################
if(trend_removal=='block_average'){
Vde_det=Vde-mean(Vde)
}else if(trend_removal=='linear_detrend'){
Vde_det=Detrend(Vde)$Detrended}
####################
### Plot spectra ###
####################
plot_spectra(Data,Vde_det,variable,timestamp)
######################
### Plot cospectra ###
######################
if(variable %in% c('u','ts','Q','C'))
{
plot_cospectra(Data,w_de_rot,Vde_det,variable,timestamp)
}
out<-list(timestamp=as.character(timestamp))
}
source('Data_load_and_preprocessing.r')
###########################################################################
#                                                                         #
#      --------------------------------------------------------------     #
#       getREddy - initial exploring of the raw eddy covariance data      #
#      --------------------------------------------------------------     #
#                                                                         #
#       Author: Milan Fischer                                             #
#       email: fischer.milan@gmail.com                                    #
#                                                                         #
###########################################################################
rm(list=ls())
library(stringr)
library(zoo)
#Functions to be used
source('2D_rotation.r')
source('Data_load_and_preprocessing.r')
source('Despike.r')
source('Ensemble_averages.r')
source('FFT.r')
source('Linear_detrend.r')
source('Plot_spectrum.r')
source('Plot_cospectrum.r')
source('Spectral_density.r')
source('Cospectral_density.r')
source('Timestamp.r')
source('Time_management_and_gap-filling.r')
# Save the path to the directory with the R codes
R_codes_WD<-getwd()
# Move one directory up
setwd('..')
Main_WD<-getwd()
# Create the ouput directory
dir.create(paste(Main_WD,'/Outputs',sep=''),showWarnings=FALSE)
# Move to directory with raw data
setwd(paste(getwd(),'/Inputs',sep=''))
# Create a list of raw data files
file<-list.files(path=getwd(),pattern='\\.ghg$')
# Air density (kg m-3)
rhoAir=1.225
# Specific heat of air (J K-1kg-1),
CpAir=1004.67
# Frequency (Hz)
f=20
# The sampling period (s)
dSampling=1/f
# Time step (minutes)
Time_step=30
# Number of standard deviation used for despiking
plausibility_threshold=4
number_of_windows=6
# Select the trend removal approach (either 'block_average' or 'linear_detrend')
trend_removal='linear_detrend'
# Define the variable to analyse (ts,Q,C,u,v,w)
variable='w'
# Cretae output folder
dir.create(paste(Main_WD,'/Outputs/',variable,sep=''),showWarnings=FALSE)
for(i in 1:length(file))
{
graphics.off()
print(Load(file[i],variable)$timestamp)
flush.console()
}
graphics.off()
file.remove(unzip(file[i]))
setwd(R_codes_WD)
q()
